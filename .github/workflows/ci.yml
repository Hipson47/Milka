name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-observability.txt || true
    
    - name: Lint with Ruff
      run: |
        ruff check app/ tests/
        ruff format --check app/ tests/
    
    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint with ESLint
      run: npm run lint
    
    - name: Type check with TypeScript
      run: npx tsc --noEmit
    
    - name: Run tests with coverage
      run: npm test -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-audit safety
    
    - name: Run pip-audit
      working-directory: ./backend
      run: pip-audit --format=json --output=pip-audit-results.json || true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=high
    
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          backend/pip-audit-results.json
          frontend/npm-audit.json

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [backend-lint-test]
    
    services:
      backend:
        image: python:3.11-slim
        env:
          NANOBANANA_URL: http://mock-api
          NANOBANANA_KEY: test_key
          DEBUG: true
        ports:
          - 8000:8000
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Start backend service
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        pip install -r requirements-observability.txt || true
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Wait for backend
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 1; done'
    
    - name: Install schemathesis
      run: pip install schemathesis
    
    - name: Run contract tests
      working-directory: ./tests-contract
      run: |
        schemathesis run \
          --schema schemathesis.yaml \
          --base-url http://localhost:8000 \
          --workers 1 \
          --max-examples 50 \
          --validate-schema \
          --junit-xml results.xml
    
    - name: Upload contract test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: contract-test-results
        path: tests-contract/results.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-lint-test, frontend-lint-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        pip install -r requirements-observability.txt || true
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install E2E test dependencies
      working-directory: ./tests-e2e
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Start backend
      working-directory: ./backend
      run: uvicorn app.main:app --host 0.0.0.0 --port 8000 &
    
    - name: Build and start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm run preview --port 5173 &
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'
    
    - name: Run E2E tests
      working-directory: ./tests-e2e
      env:
        E2E_BASE_URL: http://localhost:5173
        E2E_API_URL: http://localhost:8000
      run: npx playwright test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests-e2e/test-results/
          tests-e2e/playwright-report/

  frontend-quality:
    name: Frontend Quality Gates
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Start preview server
      working-directory: ./frontend
      run: npm run preview --port 5173 &
    
    - name: Wait for server
      run: timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 1; done'
    
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: lhci autorun --config=.lighthouserc.json
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-results
        path: frontend/lighthouse-results/

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [backend-lint-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/backend.Dockerfile
        build-args: |
          BUILD_VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: false
        load: true
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail on vulnerabilities for POC
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json
    
    - name: Push image (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/backend.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [backend-lint-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        pip install -r requirements-observability.txt || true
    
    - name: Start backend
      working-directory: ./backend
      env:
        NANOBANANA_KEY: test_mode
      run: uvicorn app.main:app --host 0.0.0.0 --port 8000 &
    
    - name: Wait for backend
      run: timeout 30 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 1; done'
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run load tests
      working-directory: ./tests-load
      env:
        API_BASE_URL: http://localhost:8000
        LOAD_TEST_DURATION: 2m
        LOAD_TEST_VUS: 3
      run: bash run-tests.sh
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: tests-load/results/
